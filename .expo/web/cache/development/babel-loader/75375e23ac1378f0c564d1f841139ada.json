{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { CodedError } from '@unimodules/core';\nimport { DEFAULT_WEB_APP_OPTIONS } from 'expo-firebase-core';\nimport * as React from 'react';\nimport { WebView } from \"./WebView\";\n\nfunction getWebviewSource(firebaseConfig, firebaseVersion) {\n  var appVerificationDisabledForTesting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var invisible = arguments.length > 3 ? arguments[3] : undefined;\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: \"https://\" + firebaseConfig.authDomain,\n    html: \"\\n<!DOCTYPE html><html>\\n<head>\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\\\">\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\">\\n  <meta name=\\\"HandheldFriendly\\\" content=\\\"true\\\">\\n  <script src=\\\"https://www.gstatic.com/firebasejs/\" + firebaseVersion + \"/firebase-app.js\\\"></script>\\n  <script src=\\\"https://www.gstatic.com/firebasejs/\" + firebaseVersion + \"/firebase-auth.js\\\"></script>\\n  <script type=\\\"text/javascript\\\">firebase.initializeApp(\" + JSON.stringify(firebaseConfig) + \");</script>\\n  <style>\\n    html, body {\\n      height: 100%;\\n      \" + (invisible ? \"padding: 0; margin: 0;\" : \"\") + \"\\n    }\\n    #recaptcha-btn {\\n      width: 100%;\\n      height: 100%;\\n      padding: 0;\\n      margin: 0;\\n      border: 0;\\n      user-select: none;\\n      -webkit-user-select: none;\\n    }\\n  </style>\\n</head>\\n<body>\\n  \" + (invisible ? \"<button id=\\\"recaptcha-btn\\\" type=\\\"button\\\" onclick=\\\"onClickButton()\\\">Confirm reCAPTCHA</button>\" : \"<div id=\\\"recaptcha-cont\\\" class=\\\"g-recaptcha\\\"></div>\") + \"\\n  <script>\\n    var fullChallengeTimer;\\n    function onVerify(token) {\\n      if (fullChallengeTimer) {\\n        clearInterval(fullChallengeTimer);\\n        fullChallengeTimer = undefined;\\n      }\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'verify',\\n        token: token\\n      }));\\n    }\\n    function onLoad() {\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'load'\\n      }));\\n      firebase.auth().settings.appVerificationDisabledForTesting = \" + appVerificationDisabledForTesting + \";\\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\\\"\" + (invisible ? 'recaptcha-btn' : 'recaptcha-cont') + \"\\\", {\\n        size: \\\"\" + (invisible ? 'invisible' : 'normal') + \"\\\",\\n        callback: onVerify\\n      });\\n      window.recaptchaVerifier.render();\\n    }\\n    function onError() {\\n      window.ReactNativeWebView.postMessage(JSON.stringify({\\n        type: 'error'\\n      }));\\n    }\\n    function onClickButton() {\\n      if (!fullChallengeTimer) {\\n        fullChallengeTimer = setInterval(function() {\\n          var iframes = document.getElementsByTagName(\\\"iframe\\\");\\n          var isFullChallenge = false;\\n          for (i = 0; i < iframes.length; i++) {\\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\\n            isFullChallenge = isFullChallenge || (\\n              !isHidden && \\n              ((iframes[i].title === 'recaptcha challenge') ||\\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\\n          }\\n          if (isFullChallenge) {\\n            clearInterval(fullChallengeTimer);\\n            fullChallengeTimer = undefined;\\n            window.ReactNativeWebView.postMessage(JSON.stringify({\\n              type: 'fullChallenge'\\n            }));  \\n          }\\n        }, 100);\\n      }\\n    }\\n    window.addEventListener('message', function(event) {\\n      if (event.data.verify) {\\n        document.getElementById('recaptcha-btn').click();\\n      }\\n    });\\n  </script>\\n  <script src=\\\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit\\\" onerror=\\\"onError()\\\"></script>\\n</body></html>\"\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig) {\n  if (!firebaseConfig) {\n    throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG', \"Missing firebase web configuration. Please set the \\\"expo.web.config.firebase\\\" field in \\\"app.json\\\" or use the \\\"firebaseConfig\\\" prop.\");\n  }\n\n  var authDomain = firebaseConfig.authDomain;\n\n  if (!authDomain) {\n    throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG', \"Missing \\\"authDomain\\\" in firebase web configuration.\");\n  }\n}\n\nexport default function FirebaseRecaptcha(props) {\n  var firebaseConfig = props.firebaseConfig,\n      firebaseVersion = props.firebaseVersion,\n      appVerificationDisabledForTesting = props.appVerificationDisabledForTesting,\n      onVerify = props.onVerify,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      onFullChallenge = props.onFullChallenge,\n      invisible = props.invisible,\n      verify = props.verify,\n      otherProps = _objectWithoutProperties(props, [\"firebaseConfig\", \"firebaseVersion\", \"appVerificationDisabledForTesting\", \"onVerify\", \"onLoad\", \"onError\", \"onFullChallenge\", \"invisible\", \"verify\"]);\n\n  var webview = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (webview.current && loaded && verify) {\n      webview.current.injectJavaScript(\"\\n    (function(){\\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\\n    })();\\n    true;\\n    \");\n    }\n\n    return function () {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n\n  if (!firebaseConfig) {\n    console.error(\"FirebaseRecaptcha: Missing firebase web configuration. Please set the \\\"expo.web.config.firebase\\\" field in \\\"app.json\\\" or use the \\\"firebaseConfig\\\" prop.\");\n    return null;\n  }\n\n  return React.createElement(WebView, _extends({\n    ref: webview,\n    javaScriptEnabled: true,\n    automaticallyAdjustContentInsets: true,\n    scalesPageToFit: true,\n    mixedContentMode: \"always\",\n    source: getWebviewSource(firebaseConfig, firebaseVersion, appVerificationDisabledForTesting, invisible),\n    onError: onError,\n    onMessage: function onMessage(event) {\n      var data = JSON.parse(event.nativeEvent.data);\n\n      switch (data.type) {\n        case 'load':\n          if (onLoad) {\n            setLoaded(true);\n            onLoad();\n          }\n\n          break;\n\n        case 'error':\n          if (onError) {\n            onError();\n          }\n\n          break;\n\n        case 'verify':\n          onVerify(data.token);\n          break;\n\n        case 'fullChallenge':\n          if (onFullChallenge) {\n            onFullChallenge();\n          }\n\n          break;\n      }\n    }\n  }, otherProps));\n}\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS\n};","map":{"version":3,"sources":["../src/FirebaseRecaptcha.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { DEFAULT_WEB_APP_OPTIONS, IFirebaseOptions } from 'expo-firebase-core';\nimport * as React from 'react';\n\nimport { WebView } from './WebView';\n\ninterface Props extends React.ComponentProps<typeof WebView> {\n  firebaseConfig?: IFirebaseOptions;\n  firebaseVersion?: string;\n  appVerificationDisabledForTesting?: boolean;\n  onLoad?: () => any;\n  onError?: () => any;\n  onVerify: (token: string) => any;\n  onFullChallenge?: () => any;\n  invisible?: boolean;\n  verify?: boolean;\n}\n\nfunction getWebviewSource(\n  firebaseConfig: IFirebaseOptions,\n  firebaseVersion?: string,\n  appVerificationDisabledForTesting: boolean = false,\n  invisible?: boolean\n) {\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n  <style>\n    html, body {\n      height: 100%;\n      ${invisible ? `padding: 0; margin: 0;` : ``}\n    }\n    #recaptcha-btn {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      border: 0;\n      user-select: none;\n      -webkit-user-select: none;\n    }\n  </style>\n</head>\n<body>\n  ${\n    invisible\n      ? `<button id=\"recaptcha-btn\" type=\"button\" onclick=\"onClickButton()\">Confirm reCAPTCHA</button>`\n      : `<div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>`\n  }\n  <script>\n    var fullChallengeTimer;\n    function onVerify(token) {\n      if (fullChallengeTimer) {\n        clearInterval(fullChallengeTimer);\n        fullChallengeTimer = undefined;\n      }\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'verify',\n        token: token\n      }));\n    }\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      firebase.auth().settings.appVerificationDisabledForTesting = ${appVerificationDisabledForTesting};\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"${\n        invisible ? 'recaptcha-btn' : 'recaptcha-cont'\n      }\", {\n        size: \"${invisible ? 'invisible' : 'normal'}\",\n        callback: onVerify\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n    function onClickButton() {\n      if (!fullChallengeTimer) {\n        fullChallengeTimer = setInterval(function() {\n          var iframes = document.getElementsByTagName(\"iframe\");\n          var isFullChallenge = false;\n          for (i = 0; i < iframes.length; i++) {\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\n            isFullChallenge = isFullChallenge || (\n              !isHidden && \n              ((iframes[i].title === 'recaptcha challenge') ||\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\n          }\n          if (isFullChallenge) {\n            clearInterval(fullChallengeTimer);\n            fullChallengeTimer = undefined;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              type: 'fullChallenge'\n            }));  \n          }\n        }, 100);\n      }\n    }\n    window.addEventListener('message', function(event) {\n      if (event.data.verify) {\n        document.getElementById('recaptcha-btn').click();\n      }\n    });\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit\" onerror=\"onError()\"></script>\n</body></html>`,\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig?: IFirebaseOptions) {\n  if (!firebaseConfig) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n  }\n  const { authDomain } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing \"authDomain\" in firebase web configuration.`\n    );\n  }\n}\n\nexport default function FirebaseRecaptcha(props: Props) {\n  const {\n    firebaseConfig,\n    firebaseVersion,\n    appVerificationDisabledForTesting,\n    onVerify,\n    onLoad,\n    onError,\n    onFullChallenge,\n    invisible,\n    verify,\n    ...otherProps\n  } = props;\n  const webview = React.useRef(null);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (webview.current && loaded && verify) {\n      // @ts-ignore: Object is possibly null\n      webview.current.injectJavaScript(`\n    (function(){\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\n    })();\n    true;\n    `);\n    }\n    return () => {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(\n      `FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n    return null;\n  }\n  return (\n    <WebView\n      ref={webview}\n      javaScriptEnabled\n      automaticallyAdjustContentInsets\n      scalesPageToFit\n      mixedContentMode=\"always\"\n      source={getWebviewSource(\n        firebaseConfig,\n        firebaseVersion,\n        appVerificationDisabledForTesting,\n        invisible\n      )}\n      onError={onError}\n      onMessage={event => {\n        const data = JSON.parse(event.nativeEvent.data);\n        switch (data.type) {\n          case 'load':\n            if (onLoad) {\n              setLoaded(true);\n              onLoad();\n            }\n            break;\n          case 'error':\n            if (onError) {\n              onError();\n            }\n            break;\n          case 'verify':\n            onVerify(data.token);\n            break;\n          case 'fullChallenge':\n            if (onFullChallenge) {\n              onFullChallenge();\n            }\n            break;\n        }\n      }}\n      {...otherProps}\n    />\n  );\n}\n\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}