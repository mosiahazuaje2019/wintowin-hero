{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mosiahazuaje/Documentos/apps/wintowin-hero/screens/Login/Login.js\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner, FirebaseRecaptchaVerifier } from 'expo-firebase-recaptcha';\nimport firebase from \"../../database/firebase\";\n\nfunction LoginScreen() {\n  var recaptchaVerifier = React.useRef(null);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      phoneNumber = _React$useState2[0],\n      setPhoneNumber = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      verificationId = _React$useState4[0],\n      setVerificationId = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      verificationCode = _React$useState6[0],\n      setVerificationCode = _React$useState6[1];\n\n  var firebaseConfig = firebase.firebase.apps.length ? firebase.firebase.app().options : undefined;\n\n  var _React$useState7 = React.useState(!firebaseConfig || Platform.OS === 'web' ? {\n    text: 'To get started, provide a valid firebase config in App.js and open this snack on an iOS or Android device.'\n  } : undefined),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      message = _React$useState8[0],\n      showMessage = _React$useState8[1];\n\n  var attemptInvisibleVerification = false;\n  return React.createElement(View, {\n    style: {\n      padding: 20,\n      marginTop: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(FirebaseRecaptchaVerifierModal, {\n    ref: recaptchaVerifier,\n    firebaseConfig: firebaseConfig,\n    title: \"Prove you are human!\",\n    cancelLabel: \"X\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Enter phone number\"), React.createElement(TextInput, {\n    style: {\n      marginVertical: 10,\n      fontSize: 17\n    },\n    placeholder: \"+1 999 999 9999\",\n    autoFocus: true,\n    autoCompleteType: \"tel\",\n    keyboardType: \"phone-pad\",\n    textContentType: \"telephoneNumber\",\n    onChangeText: function onChangeText(phoneNumber) {\n      return setPhoneNumber(phoneNumber);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Send Verification Code\",\n    disabled: !phoneNumber,\n    onPress: function _callee() {\n      var phoneProvider, _verificationId;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              phoneProvider = new firebase.firebase.auth.PhoneAuthProvider();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(phoneProvider.verifyPhoneNumber(phoneNumber, recaptchaVerifier.current));\n\n            case 4:\n              _verificationId = _context.sent;\n              setVerificationId(_verificationId);\n              showMessage({\n                text: 'Verification code has been sent to your phone.'\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context.t0.message,\n                color: 'red'\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Enter Verification code\"), React.createElement(TextInput, {\n    style: {\n      marginVertical: 10,\n      fontSize: 17\n    },\n    editable: !!verificationId,\n    placeholder: \"123456\",\n    onChangeText: setVerificationCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Confirm Verification Code\",\n    disabled: !verificationId,\n    onPress: function _callee2() {\n      var credential;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              credential = firebase.firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(firebase.firebase.auth().signInWithCredential(credential));\n\n            case 4:\n              showMessage({\n                text: 'Phone authentication successful üëç'\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              showMessage({\n                text: \"Error: \" + _context2.t0.message,\n                color: 'red'\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), message ? React.createElement(TouchableOpacity, {\n    style: [StyleSheet.absoluteFill, {\n      backgroundColor: 0xffffffee,\n      justifyContent: 'center'\n    }],\n    onPress: function onPress() {\n      return showMessage(undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: message.color || 'blue',\n      fontSize: 17,\n      textAlign: 'center',\n      margin: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, message.text)) : undefined, attemptInvisibleVerification && React.createElement(FirebaseRecaptchaBanner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 40\n    }\n  }));\n}\n\nexport default LoginScreen;","map":{"version":3,"sources":["/home/mosiahazuaje/Documentos/apps/wintowin-hero/screens/Login/Login.js"],"names":["React","FirebaseRecaptchaVerifierModal","FirebaseRecaptchaBanner","FirebaseRecaptchaVerifier","firebase","LoginScreen","recaptchaVerifier","useRef","useState","phoneNumber","setPhoneNumber","verificationId","setVerificationId","verificationCode","setVerificationCode","firebaseConfig","apps","length","app","options","undefined","Platform","OS","text","message","showMessage","attemptInvisibleVerification","padding","marginTop","marginVertical","fontSize","phoneProvider","auth","PhoneAuthProvider","verifyPhoneNumber","current","color","credential","signInWithCredential","StyleSheet","absoluteFill","backgroundColor","justifyContent","textAlign","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  TextInput,\n  Button,\n  StyleSheet,\n  TouchableOpacity,\n  Platform,\n} from 'react-native';\nimport { FirebaseRecaptchaVerifierModal, FirebaseRecaptchaBanner,FirebaseRecaptchaVerifier } from 'expo-firebase-recaptcha';\nimport firebase from '../../database/firebase';\n\nfunction LoginScreen() {\n\n    const recaptchaVerifier = React.useRef(null);\n    const [phoneNumber, setPhoneNumber] = React.useState();\n    const [verificationId, setVerificationId] = React.useState();\n    const [verificationCode, setVerificationCode] = React.useState();\n    const firebaseConfig = firebase.firebase.apps.length ? firebase.firebase.app().options : undefined;\n    const [message, showMessage] = React.useState(\n      !firebaseConfig || Platform.OS === 'web'\n        ? {\n            text:\n              'To get started, provide a valid firebase config in App.js and open this snack on an iOS or Android device.',\n          }\n        : undefined\n    );\n    const attemptInvisibleVerification = false;  \n    return (\n    <View style={{ padding: 20, marginTop: 50 }}>\n      <FirebaseRecaptchaVerifierModal\n        ref={recaptchaVerifier}\n        firebaseConfig={firebaseConfig}\n        title='Prove you are human!'\n        cancelLabel='X'\n      />\n      <Text style={{ marginTop: 5 }}>Enter phone number</Text>\n      <TextInput\n        style={{ marginVertical: 10, fontSize: 17 }}\n        placeholder=\"+1 999 999 9999\"\n        autoFocus\n        autoCompleteType=\"tel\"\n        keyboardType=\"phone-pad\"\n        textContentType=\"telephoneNumber\"\n        onChangeText={phoneNumber => setPhoneNumber(phoneNumber)}\n      />\n      <Button\n        title=\"Send Verification Code\"\n        disabled={!phoneNumber}\n        onPress={async () => {\n          // The FirebaseRecaptchaVerifierModal ref implements the\n          // FirebaseAuthApplicationVerifier interface and can be\n          // passed directly to `verifyPhoneNumber`.\n          try {\n            const phoneProvider = new firebase.firebase.auth.PhoneAuthProvider();\n            const verificationId = await phoneProvider.verifyPhoneNumber(\n              phoneNumber,\n              recaptchaVerifier.current\n            );\n            setVerificationId(verificationId);\n            showMessage({\n              text: 'Verification code has been sent to your phone.',\n            });\n          } catch (err) {\n            showMessage({ text: `Error: ${err.message}`, color: 'red' });\n          }\n        }}\n      />\n      <Text style={{ marginTop: 20 }}>Enter Verification code</Text>\n      <TextInput\n        style={{ marginVertical: 10, fontSize: 17 }}\n        editable={!!verificationId}\n        placeholder=\"123456\"\n        onChangeText={setVerificationCode}\n      />\n      <Button\n        title=\"Confirm Verification Code\"\n        disabled={!verificationId}\n        onPress={async () => {\n          try {\n            const credential = firebase.firebase.auth.PhoneAuthProvider.credential(\n              verificationId,\n              verificationCode\n            );\n            await firebase.firebase.auth().signInWithCredential(credential);\n            showMessage({ text: 'Phone authentication successful üëç' });\n          } catch (err) {\n            showMessage({ text: `Error: ${err.message}`, color: 'red' });\n          }\n        }}\n      />\n      {message ? (\n        <TouchableOpacity\n          style={[\n            StyleSheet.absoluteFill,\n            { backgroundColor: 0xffffffee, justifyContent: 'center' },\n          ]}\n          onPress={() => showMessage(undefined)}>\n          <Text\n            style={{\n              color: message.color || 'blue',\n              fontSize: 17,\n              textAlign: 'center',\n              margin: 20,\n            }}>\n            {message.text}\n          </Text>\n        </TouchableOpacity>\n      ) : (\n        undefined\n      )}\n      {attemptInvisibleVerification && <FirebaseRecaptchaBanner />}\n    </View>\n  );\n}\n\nexport default LoginScreen\n"]},"metadata":{},"sourceType":"module"}